name: Conan
on:
  pull_request:
  push:
  release:
    types: [published]
  schedule:
    - cron: '0 0 1,5,10,15,20,25,30 * *'  # Run approximately every 5 days

jobs:
  calculate-matrix:
    runs-on: 'ubuntu-latest'
    outputs:
      matrix: ${{ steps.calc-build-matrix.outputs.matrix }}
    steps:
      - name: 'Calculate build matrix'
        id: 'calc-build-matrix'
        shell: python
        run: |
          import itertools
          import json
          import pprint
          import shlex
          os_profile_list = [
            ("ubuntu-latest",   "default"),
            ("windows-latest",  "default"),
            ("macos-latest",    "default"),
            ("ubuntu-latest",   "${{ github.workspace }}/conan/profiles/android21-armv8"),
          ]
          branch_list = ["current"]
          if "${{ github.event_name }}" != "release":
            branch_list.append("master")
          matrix = []
          for (os, profile), branch in itertools.product(os_profile_list, branch_list):
            conan_extra_args = []
            if "armv8" in profile:
              # Work around missing `self.cpp_info.env_info.CONAN_CMAKE_SYSTEM_PROCESSOR = "aarch64"` in android-ndk recipe
              conan_extra_args.extend(["-e", "CONAN_CMAKE_SYSTEM_PROCESSOR=aarch64"])
            matrix.append({"os": os, "conan-profile": profile, "branch": branch, "conan-extra-args": shlex.join(conan_extra_args)})
          pprint.pprint(matrix)
          print("::set-output name=matrix::{}".format(json.dumps(matrix)))
  build-conan:
    needs: 'calculate-matrix'
    strategy:
      matrix:
        include: ${{ fromJSON(needs.calculate-matrix.outputs.matrix) }}
    runs-on: '${{ matrix.os }}'
    continue-on-error: ${{ matrix.branch != 'current' }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: 'Install python dependencies'
        run: |
          python -m pip install -r requirements.txt
      - name: 'Install conan'
        run: |
          python -m pip install conan
      - name: 'Download pdfium sources'
        run: |
          python pdfium_download.py --branch "${{ matrix.branch }}" --destination "pdfium"
      - name: 'Initialize conan'
        run: |
          conan config init
          conan config set log.print_run_commands=True
      - name: 'Configure, build and install static pdfium'
        shell: bash
        run: |
          conan install . pdfium/${{ matrix.branch }} -pr:h ${{ matrix.conan-profile }} -pr:b default \
            -o pdfium:shared=False --build missing ${{ matrix.conan-extra-args }} \
                          -if static/build
          conan source  . -if static/build -sf static/source
          conan build   . -if static/build -sf static/source -bf static/build -pf static/package
          conan package . -if static/build -sf static/source -bf static/build -pf static/package
      - name: 'Configure, build and install shared pdfium'
        shell: bash
        run: |
          conan install . pdfium/${{ matrix.branch }} -pr:h ${{ matrix.conan-profile }} -pr:b default \
            -o pdfium:shared=False --build missing \
                          -if shared/build
          conan source  . -if shared/build -sf shared/source
          conan build   . -if shared/build -sf shared/source -bf shared/build -pf shared/package
          conan package . -if shared/build -sf shared/source -bf shared/build -pf shared/package
